#
# Firmware for gate lock
#
---
substitutions:
  uname: Entrance Lock
  device_name: entrance_lock
  friendly_name: $uname
  device_description: "Entrance Gate Lock"

esphome:
  name: '${device_name}'
  comment: '${device_description}'
  project:
    name: "vooon.smart_lock"
    version: "0.1.0"

  includes:
    - d1motor.h
    - xgzp6847d.h
    - lock_controller.h

  # XXX
  #arduino_version: dev

  #on_boot:
  #  - script.execute: delayed_lockctl_setup_scr

esp32:
  board: esp32-s2-saola-1
  variant: esp32s2
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE: '4MB'
      CONFIG_ESP_CONSOLE_USB_CDC: 'y'
      CONFIG_USB_ENABLED: 'n'
      CONFIG_ETH_ENABLED: 'n'
      # CONFIG_ESP32S2_SPIRAM_SUPPORT: 'y'
      CONFIG_ESPTOOLPY_AFTER_NORESET: 'y'

wifi:
  networks: !secret wifi_networks

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${uname} Fallback Hotspot"
    password: !secret wifi_ap_passwd

# captive_portal:

# Enable logging
logger:

# debug:

# Enable Home Assistant API
api:
  id: api_apiserver
  password: !secret api_password
  reboot_timeout: 5min
  services:
    - service: lock
      then:
        - logger.log: "requested to lock"
        - script.execute: lock_scr

    - service: unlock
      then:
        - logger.log: "requested to unlock"
        - script.execute: unlock_scr

    - service: reset_counters
      then:
        - globals.set:
            id: gv_lock_cnt
            value: '0'
        - globals.set:
            id: gv_unlock_cnt
            value: '0'

ota:
  password: !secret ota_password

# web_server:
#   auth:
#     username: admin
#     password: !secret web_password

# prometheus:

status_led:
  pin: 15

i2c:
  id: i2c_bus
  scl: 35
  sda: 33
  frequency: 100kHz
  scan: true

time:
  - platform: homeassistant
    id: esp_time
  - platform: sntp
    id: ntp_time
    timezone: Europe/Moscow

globals:
  - id: gv_lock_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'
  - id: gv_unlock_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'
  - id: gv_latch_mode
    type: bool
    restore_value: yes
    initial_value: "true"
  - id: gv_int_open_enabled
    type: bool
    restore_value: yes
    initial_value: "true"
  - id: gv_ext_open_enabled
    type: bool
    restore_value: yes
    initial_value: "true"

custom_component:
  - id: lockctl
    lambda: |-
      // auto m = static_cast<D1Motor*>(id(lock_motor));
      // auto ctl = new LockController(
      //   *m, *id(lockctl_on_state_change_scr),
      //   *id(h_locked), *id(h_unlocked), *id(h_closed),
      //   id(gv_lock_cnt), id(gv_unlock_cnt)
      // );
      // return {ctl};
      return {};

output:
  - platform: custom
    type: float
    lambda: |-
      auto compressor_output = new D1Motor(id(i2c_bus), 0x30, 0);
      App.register_component(compressor_output);
      return {compressor_output};

    outputs:
      id: compressor

  - platform: custom
    type: float
    lambda: |-
      auto valve_output = new D1Motor(id(i2c_bus), 0x30, 1);
      App.register_component(valve_output);
      return {valve_output};

    outputs:
      id: valve

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} - IP Address"
      icon: mdi:wifi
    ssid:
      name: "${friendly_name} - Connected SSID"
      icon: mdi:wifi-strength-2
    bssid:
      name: "${friendly_name} - BSSID"

  - platform: version
    hide_timestamp: true
    name: "${friendly_name} - ESPHome Version"

  - platform: template
    id: txsns_state
    name: "$uname - State"
    lambda: |-
      using S = LockController::State;
      //auto ctl = get_lockctl(id(lockctl));
      //switch (ctl->get_state()) {
      switch (S::unknown) {
        case S::open:           return {"OPEN"};
        case S::opening:        return {"OPENING"};
        case S::close:          return {"CLOSE"};
        case S::closing:        return {"CLOSING"};
        case S::wait_to_close:  return {"WAIT_TO_CLOSE"};
        case S::unknown:
        default:                return {"UNKNOWN"};
      }

binary_sensor:
  - platform: status
    name: "$uname - Connected"

  - platform: gpio
    pin:
      number: 7
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 10ms
    id: h_closed
    name: "$uname - Door Closed (gpio)"
    device_class: door
    internal: true
    on_press:
      # - component.update: h_closed_ha
      - lambda: |-
          //auto ctl = get_lockctl(id(lockctl));
          //ctl->on_door_closed();
    on_release:
      # - component.update: h_closed_ha
      - script.execute: engage_latch_scr

  - platform: template
    name: "$uname - Door Closed"
    id: h_closed_ha
    device_class: door
    lambda: |-
      // NOTE: Home Assistant have inverted meaning of sensor: ON: open, OFF: closed
      return !id(h_closed).state;

  - platform: gpio
    pin:
      number: 9
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 10ms
    id: h_locked
    name: "$uname - Locked endstop"
    on_press:
      - lambda: |-
          //auto ctl = get_lockctl(id(lockctl));
          //ctl->on_lock_endstop();

  - platform: gpio
    pin:
      number: 11
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 10ms
    id: h_unlocked
    name: "$uname - Unlocked endstop"
    on_press:
      - lambda: |-
          //auto ctl = get_lockctl(id(lockctl));
          //ctl->on_unlock_endstop();

  - platform: gpio
    pin:
      number: 18
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 10ms
    id: btn_ext_open
    name: "$uname - External Open"
    on_press:
      - script.execute: unlock_signal_scr

  - platform: gpio
    pin:
      number: 16
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 10ms
    id: btn_int_open
    name: "$uname - Internal Open"
    on_press:
      - script.execute: internal_button_scr

sensor:
  - platform: wifi_signal
    name: "$uname - WiFi Signal"
    update_interval: 10s

  - platform: uptime
    name: "$uname - Uptime"

  - platform: template
    name: "$uname - Lock Count"
    id: sns_lock_cnt
    icon: mdi:counter
    accuracy_decimals: 0
    unit_of_measurement: count
    lambda: !lambda |
      return float(id(gv_lock_cnt));

  - platform: template
    name: "$uname - Unlock Count"
    id: sns_unlock_cnt
    icon: mdi:counter
    accuracy_decimals: 0
    unit_of_measurement: count
    lambda: !lambda |
      return float(id(gv_unlock_cnt));

  - platform: custom
    lambda: |-
      auto xgzp = new XGZP6847D(id(i2c_bus), 0x6D, 4);
      App.register_component(xgzp);
      return {xgzp->pressure_sensor, xgzp->temperature_sensor};

    sensors:
      - name: "$uname - Air tank pressure"
        unit_of_measurement: Pa
        filters:
          - sliding_window_moving_average:
              window_size: 10
              send_every: 10

        on_value_range:
          - below: 50000.0
            then:
              - script.execute: compressor_on_scr
          - above: 160000.0
            then:
              - switch.turn_off: compressor_sw

      - name: "$uname - Temperature"
        unit_of_measurement: Â°C
        filters:
          - sliding_window_moving_average:
              window_size: 10
              send_every: 100

switch:
  - platform: restart
    name: $uname - Reboot

  - platform: template
    id: latch_mode
    name: $uname - Latch Mode
    icon: mdi:lock-smart
    lambda: |-
      return id(gv_latch_mode);
    turn_on_action:
      - globals.set:
          id: gv_latch_mode
          value: "true"
    turn_off_action:
      - globals.set:
          id: gv_latch_mode
          value: "false"

  - platform: template
    id: int_open_enabled
    name: $uname - Internal Open Button Enabled
    icon: mdi:login
    lambda: |-
      return id(gv_int_open_enabled);
    turn_on_action:
      - globals.set:
          id: gv_int_open_enabled
          value: "true"
    turn_off_action:
      - globals.set:
          id: gv_int_open_enabled
          value: "false"

  - platform: template
    id: ext_open_enabled
    name: $uname - External Open Button Enabled
    icon: mdi:cellphone-nfc
    lambda: |-
      return id(gv_ext_open_enabled);
    turn_on_action:
      - globals.set:
          id: gv_ext_open_enabled
          value: "true"
    turn_off_action:
      - globals.set:
          id: gv_ext_open_enabled
          value: "false"

  - platform: output
    id: compressor_sw
    name: "$uname - Compressor"
    output: compressor

  - platform: template
    id: open_valve_sw
    name: "$uname - Open Valve"
    lambda: |-
      return static_cast<D1Motor*>(id(valve))->level > 0.0;
    turn_on_action:
      - lambda: |-
          static_cast<D1Motor*>(id(valve))->set_level(0.5);
      - script.execute: compressor_on_scr
    turn_off_action: &valve_off
      - lambda: |-
          static_cast<D1Motor*>(id(valve))->set_level(0.0);

  - platform: template
    id: close_valve_sw
    name: "$uname - Close Valve"
    lambda: |-
      return static_cast<D1Motor*>(id(valve))->level < 0.0;
    turn_on_action:
      - lambda: |-
          static_cast<D1Motor*>(id(valve))->set_level(-0.5);
      - script.execute: compressor_on_scr
    turn_off_action: *valve_off

script:
  # delayed controller init
  - id: delayed_lockctl_setup_scr
    then:
      - delay: 1s
      - lambda: |-
          //auto ctl = get_lockctl(id(lockctl));
          //ctl->restore_state();

  - id: lockctl_on_state_change_scr
    mode: restart
    then:
      - component.update: txsns_state
      - component.update: sns_lock_cnt
      - component.update: sns_unlock_cnt

  - id: compressor_on_scr
    mode: restart
    then:
      - switch.turn_on: compressor_sw
      - delay: 60s
      - switch.turn_off: compressor_sw

  # activate locking logic
  - id: lock_scr
    then:
      - lambda: |-
          //auto ctl = get_lockctl(id(lockctl));
          //ctl->lock();

  # unlock the door, if latch mode is on give one minute to open
  - id: unlock_scr
    mode: restart
    then:
      - lambda: |-
          //auto ctl = get_lockctl(id(lockctl));
          //ctl->unlock();
      - if:
          condition:
            - switch.is_on: latch_mode
          then:
            - delay: 1min
            - script.execute: lock_scr

  # as soon as door opens we can engage locking
  - id: engage_latch_scr
    then:
      - if:
          condition:
            - switch.is_on: latch_mode
          then:
            - script.execute: lock_scr

  # called when wires to doorbell panel shorts
  - id: unlock_signal_scr
    then:
      - if:
          condition:
            switch.is_on: ext_open_enabled
          then:
            - logger.log:
                format: "external unlock called"
                level: INFO
            - script.execute: unlock_scr
          else:
            - logger.log:
                format: "external unlock called, but it is disabled"
                level: WARN

  # called when open button pressed
  - id: internal_button_scr
    then:
      - if:
          condition:
            switch.is_on: int_open_enabled
          then:
            - logger.log:
                format: "internal unlock called"
                level: INFO
            - if:
                condition:
                  lambda: |-
                    //auto ctl = get_lockctl(id(lockctl));
                    //auto st = ctl->get_state();
                    //return st == LockController::State::open || st == LockController::State::wait_to_close;
                    return false;
                then:
                  - script.execute: lock_scr
                else:
                  - script.execute: unlock_scr
          else:
            - logger.log:
                format: "internal unlock called, but it is disabled"
                level: WARN
